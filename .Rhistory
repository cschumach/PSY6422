animate(e, height = 650, width = 800, nframes = 500, detail = 15, fps = 15, duration = 45,
end_pause = 75, res = 100)
#full player data vizualization
graph2.animation <- e +
transition_time(date) +
labs(subtitle = "Tournament Date: {frame_time}") +
theme(plot.subtitle = element_text(color = "maroon", hjust = .5))
#making the animation
animate(e, height = 650, width = 800, detail = 15, fps = 15, nframes = 600,  duration = 45,
end_pause = 75, res = 100)
setwd("C:/Users/GAMER/Desktop/CSGOviz")
library("here")
#converts the two datasets into dataframe
dfr <- read.csv(here('rawdata',"results.csv"))
dfp <- read.csv(here('rawdata',"players.csv"))
katoplayerwins <- read.csv(here('data',"katoplayerresults.csv"))
#the data frame below was created based on the katoPGRT data frame, missing data was filled in.
fullkatoplayerdf <- read.csv(here('data','fullkatoplayersdata.csv'))
library("tidyverse")
library("png")
library("gifski")
library('gganimate')
library("ggthemes")
library('RColorBrewer')
library('ggrepel')
library('plotly')
library('extrafont')
library('ggplot2')
e <- ggplot(filfullkatoplayerdf, aes(x = kast, y = adr, color = team)) +
geom_point(size = 4, alpha = .6, aes(shape = factor(winner))) +
theme_dark() +
theme(text = element_text (size = 15), title = element_text(face = 'bold'),
plot.title = element_text(hjust = .5), panel.grid.minor = element_blank()) +
scale_shape_discrete(labels = c("Win", "Loss"), name = 'Wins and Losses') +
scale_color_manual(name = "CSGO Teams", values = mycolors) +
geom_vline(xintercept = 68.95)+ #median value of adr
geom_hline(yintercept = 71.90) + #median value of kast
labs(title = "IEM Katowice 2020 Team Performance",
x = "Kills, Assists, Survival and Trades",
y = "Average Damage Per Round") +
transition_time(as.Date(filfullkatoplayerdf$date)) +
labs(subtitle = "Tournament Date: {frame_time}") +
theme(plot.subtitle = element_text(color = "maroon"))
e
e <- ggplot(filfullkatoplayerdf, aes(x = kast, y = adr, color = team)) +
geom_point(size = 4, alpha = .6, aes(shape = factor(winner))) +
theme_dark() +
theme(text = element_text (size = 15), title = element_text(face = 'bold'),
plot.title = element_text(hjust = .5), panel.grid.minor = element_blank()) +
scale_shape_discrete(labels = c("Win", "Loss"), name = 'Wins and Losses') +
scale_color_manual(name = "CSGO Teams", values = mycolors) +
geom_vline(xintercept = 68.95)+ #median value of adr
geom_hline(yintercept = 71.90) + #median value of kast
labs(title = "IEM Katowice 2020 Team Performance",
x = "Kills, Assists, Survival and Trades",
y = "Average Damage Per Round")
e
katoplayerwins <- read.csv(here('data',"katoplayerresults.csv"))
#the data frame below was created based on the katoPGRT data frame, missing data was filled in.
fullkatoplayerdf <- read.csv(here('data','fullkatoplayersdata.csv'))
#filtering the data via match ID (4901) to only include matches and players during 2020 katowice
dfrkato <- dfr%>%filter(event_id == 4901)
dfpkato <- dfp%>%filter(event_id == 4901)
#filtering teams and adding players to track the teams and the matches who ended up in the finals
dfnaviP <- dfpkato%>%filter(team == "Natus Vincere" | team == "G2" | opponent == "Natus Vincere" | opponent == "G2")
#did the same for new data set with all dates added
filfullkatoplayerdf <- fullkatoplayerdf %>%filter(team == "Natus Vincere" | team == "G2" | opponent == "Natus Vincere" | opponent == "G2")
filfullkatoplayerdf <- filfullkatoplayerdf %>%group_by(date) %>% arrange(date)
filfullkatoplayerdf$date <- as.Date(filfullkatoplayerdf$date)
#Creating custom color palette
mycolors <- c("#6A00FF", "#FF00FF", "#FF0040", "#FF9500", "#FFFF00", "#AAFF00","#00FF15", "#00FFFF", "#0095FF")
e <- ggplot(filfullkatoplayerdf, aes(x = kast, y = adr, color = team)) +
geom_point(size = 4, alpha = .6, aes(shape = factor(winner))) +
theme_dark() +
theme(text = element_text (size = 15), title = element_text(face = 'bold'),
plot.title = element_text(hjust = .5), panel.grid.minor = element_blank()) +
scale_shape_discrete(labels = c("Win", "Loss"), name = 'Wins and Losses') +
scale_color_manual(name = "CSGO Teams", values = mycolors) +
geom_vline(xintercept = 68.95)+ #median value of adr
geom_hline(yintercept = 71.90) + #median value of kast
labs(title = "IEM Katowice 2020 Team Performance",
x = "Kills, Assists, Survival and Trades",
y = "Average Damage Per Round")
e
library("tidyverse")
library("png")
library("gifski")
library('gganimate')
library("ggthemes")
library("here")
library('RColorBrewer')
library('ggrepel')
library('plotly')
library('extrafont')
library('ggplot2')
e <- ggplot(filfullkatoplayerdf, aes(x = kast, y = adr, color = team)) +
geom_point(size = 4, alpha = .6, aes(shape = factor(winner))) +
theme_dark() +
theme(text = element_text (size = 15), title = element_text(face = 'bold'),
plot.title = element_text(hjust = .5), panel.grid.minor = element_blank()) +
scale_shape_discrete(labels = c("Win", "Loss"), name = 'Wins and Losses') +
scale_color_manual(name = "CSGO Teams", values = mycolors) +
geom_vline(xintercept = 68.95)+ #median value of adr
geom_hline(yintercept = 71.90) + #median value of kast
labs(title = "IEM Katowice 2020 Team Performance",
x = "Kills, Assists, Survival and Trades",
y = "Average Damage Per Round")
e
e
View(filfullkatoplayerdf)
e <- ggplot(filfullkatoplayerdf, aes(x = kast, y = adr, color = team)) +
geom_point(size = 4, alpha = .6, aes(shape = factor(winner))) +
theme_dark() +
theme(text = element_text (size = 15), title = element_text(face = 'bold'),
plot.title = element_text(hjust = .5), panel.grid.minor = element_blank()) +
scale_shape_discrete(labels = c("Win", "Loss"), name = 'Wins and Losses') +
scale_color_manual(name = "CSGO Teams", values = mycolors) +
geom_vline(xintercept = 68.95)+ #median value of adr
geom_hline(yintercept = 71.90) + #median value of kast
labs(title = "IEM Katowice 2020 Team Performance",
x = "Kills, Assists, Survival and Trades",
y = "Average Damage Per Round")
e
e
#the data frame below was created based on the katoPGRT data frame, missing data was filled in.
fullkatoplayerdf <- read.csv(here('data','fullkatoplayersdata.csv'))
filfullkatoplayerdf <- fullkatoplayerdf %>%filter(team == "Natus Vincere" | team == "G2" | opponent == "Natus Vincere" | opponent == "G2")
#arranging data by team for animation render time decrease filfullkatoplayerdf is becoming AFFKPdf
filfullkatoplayerdf <- filfullkatoplayerdf %>%group_by(date) %>% arrange(date)
filfullkatoplayerdf$date <- as.Date(filfullkatoplayerdf$date)
e <- ggplot(filfullkatoplayerdf, aes(x = kast, y = adr, color = team)) +
geom_point(size = 4, alpha = .6, aes(shape = factor(winner))) +
theme_dark() +
theme(text = element_text (size = 15), title = element_text(face = 'bold'),
plot.title = element_text(hjust = .5), panel.grid.minor = element_blank()) +
scale_shape_discrete(labels = c("Win", "Loss"), name = 'Wins and Losses') +
scale_color_manual(name = "CSGO Teams", values = mycolors) +
geom_vline(xintercept = 68.95)+ #median value of adr
geom_hline(yintercept = 71.90) + #median value of kast
labs(title = "IEM Katowice 2020 Team Performance",
x = "Kills, Assists, Survival and Trades",
y = "Average Damage Per Round")
e
e
View(e)
View(e)
show(e)
print(e)
library("tidyverse")
library("png")
library("gifski")
library('gganimate')
library("ggthemes")
library('RColorBrewer')
library('ggrepel')
library('plotly')
library('extrafont')
library('ggplot2')
e <- ggplot(filfullkatoplayerdf, aes(x = kast, y = adr, color = team)) +
geom_point(size = 4, alpha = .6, aes(shape = factor(winner))) +
theme_dark() +
theme(text = element_text (size = 15), title = element_text(face = 'bold'),
plot.title = element_text(hjust = .5), panel.grid.minor = element_blank()) +
scale_shape_discrete(labels = c("Win", "Loss"), name = 'Wins and Losses') +
scale_color_manual(name = "CSGO Teams", values = mycolors) +
geom_vline(xintercept = 68.95)+
geom_hline(yintercept = 71.90) +
labs(title = "IEM Katowice 2020 Team Performance",
x = "Kills, Assists, Survival and Trades",
y = "Average Damage Per Round")
e
#scatterplot tracking winners (g2 & navi) for kato
d <- ggplot(filfullkatoplayerdf, aes(x = kast, y = hs, color = team)) +
geom_point(size = 4, alpha = .7, aes(shape = factor(winner))) +
theme_dark() +
theme(axis.title = element_text(face = 'bold'),
title = element_text(face = 'bold'), plot.title = element_text(hjust = .5),
panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
scale_shape_discrete(labels = c("Win", "Loss"), name = 'Wins and Losses') +
scale_color_manual(values = mycolors) +
scale_shape_manual(values = c(1,7)) +
#geom_label_repel(aes(label = player_name))+
#vline and hline intercept values decided due to the median scores of both ratings
geom_vline(xintercept = 70)+ #1.04) +
geom_hline(yintercept = 18.00) +
labs(title = element_text("IEM Katowice 2020 G2 and Natus Vincere Performance"),
x = "KAST",
y = "Headshots")
d
e
library("here")
ggsave(here('figs', 'scatterplot.png'))
#saving ani-graph
anim_save(here('figs','anifigwmrk.gif'))
#saving ani-graph
anim_save('anifigwmrk.gif', here('figs'))
#saving ani-graph
anim_save(here('figs','anifigwmrk.gif'))
library("png")
library("gifski")
#saving ani-graph
anim_save(here('figs','anifigwmrk.gif'))
library('gganimate')
#saving ani-graph
anim_save(here('figs','anifigwmrk.gif'))
# TEST FOR EDITING : building blocks to set up animation
#graph1.animation = c +
# transition_time(as.Date(katoPRGT$date)) +
#labs(subtitle = "Tournament Date: {frame_time}") +
#shadow_wake(wake_length = .1)
#full player data vizualization
graph2.animation <- e +
transition_time(filfullkatoplayerdf$date) +
labs(subtitle = "Tournament Date: {frame_time}") +
theme(plot.subtitle = element_text(color = "maroon", hjust = .5)) +
shadow_mark()
#making the animation
animate(graph2.animation, height = 650, width = 800, detail = 15, fps = 15, nframes = 675,  duration = 45,
end_pause = 75, res = 100) +
#saving ani-graph
anim_save(here('figs','anifigwmrk.gif'))
e <- ggplot(filfullkatoplayerdf, aes(x = kast, y = adr, color = team)) +
geom_point(size = 4, alpha = .6, aes(shape = factor(winner))) +
theme_dark() +
theme(text = element_text (size = 15), title = element_text(face = 'bold'),
plot.title = element_text(hjust = .5), panel.grid.minor = element_blank()) +
scale_shape_discrete(labels = c("Win", "Loss"), name = 'Wins and Losses') +
scale_color_manual(name = "CSGO Teams", values = mycolors) + #using custom color palette
geom_vline(xintercept = 68.95)+
geom_hline(yintercept = 71.90) +
labs(title = "IEM Katowice 2020 Team Performance",
x = "Kills, Assists, Survival and Trades",
y = "Average Damage Per Round")
#making the animation
animate(graph2.animation, height = 650, width = 800, detail = 15, fps = 15, nframes = 675,  duration = 45,
end_pause = 75, res = 100)
e <- ggplot(filfullkatoplayerdf, aes(x = kast, y = adr, color = team)) +
geom_point(size = 4, alpha = .6, aes(shape = factor(winner))) +
theme_dark() +
theme(text = element_text (size = 15), title = element_text(face = 'bold'),
plot.title = element_text(hjust = .5), panel.grid.minor = element_blank()) +
scale_shape_discrete(labels = c("Win", "Loss"), name = 'Wins and Losses') +
scale_color_manual(name = "CSGO Teams", values = mycolors) + #using custom color palette
geom_vline(xintercept = 68.95)+
geom_hline(yintercept = 71.90) +
labs(title = "IEM Katowice 2020 Team Performance Spread",
x = "Kills, Assists, Survival and Trades",
y = "Average Damage Per Round")
ggsave(here('figs', 'scatterplot.png'))
# TEST FOR EDITING : building blocks to set up animation
#graph1.animation = c +
# transition_time(as.Date(katoPRGT$date)) +
#labs(subtitle = "Tournament Date: {frame_time}") +
#shadow_wake(wake_length = .1)
#full player data vizualization
graph2.animation <- e +
transition_time(filfullkatoplayerdf$date) +
labs(subtitle = "Tournament Date: {frame_time}") +
theme(plot.subtitle = element_text(color = "maroon", hjust = .5)) +
shadow_mark()
e <- ggplot(filfullkatoplayerdf, aes(x = kast, y = adr, color = team)) +
geom_point(size = 4, alpha = .6, aes(shape = factor(winner))) +
theme_dark() +
theme(text = element_text (size = 15), title = element_text(face = 'bold'),
plot.title = element_text(hjust = .5), panel.grid.minor = element_blank()) +
scale_shape_discrete(labels = c("Win", "Loss"), name = 'Wins and Losses') +
scale_color_manual(name = "CSGO Teams", values = mycolors) + #using custom color palette
geom_vline(xintercept = 68.95)+
geom_hline(yintercept = 71.90) +
labs(title = "IEM Katowice 2020 Team Performance Spread",
x = "Kills, Assists, Survival and Trades",
y = "Average Damage Per Round")
e
knitr::opts_chunk$set(echo = TRUE)
library("tidyverse")
library("png")
library("gifski")
library("gganimate")
library("ggthemes")
library("here")
library('RColorBrewer')
library('ggrepel')
library('plotly')
dfp <- read.csv("players.csv")
#converts the two datasets into dataframe
dfr <- read.csv("results.csv")
library("tidyverse")
library("png")
library("gifski")
library("gganimate")
library("ggthemes")
library("here")
library('RColorBrewer')
library('ggrepel')
library('plotly')
dfp <- read.csv(here('rawdata', "players.csv"))
head(dfp)
#converts the two datasets into dataframe
dfr <- read.csv(here('rawdata',"results.csv"))
dfp <- read.csv(here('rawdata',"players.csv"))
#filtering the data via match ID (4901) to only include matches and players during 2020 katowice
dfpkato <- dfp%>%filter(event_id == 4901)
#arranging entire tournament into groups by team for ease of interpretation
katoPRGT <- dfpkato %>% group_by(team) %>% arrange(team)
head(dfr)
#filtering the data via match ID (4901) to only include matches and players during 2020 katowice
dfrkato <- dfr%>%filter(event_id == 4901)
#arranging katowice results by team for ease of interpretation
katoRGT <- dfrkato %>% group_by(team_1) %>% arrange(team_1)
fullkatoplayerdf <- read.csv(here('data','fullkatoplayersdata.csv')))
fullkatoplayerdf <- read.csv(here('data','fullkatoplayersdata.csv'))
#filter to only track matches with Natus, G2 and their opponents
filfullkatoplayerdf <- fullkatoplayerdf %>%filter(team == "Natus Vincere" | team == "G2" | opponent == "Natus Vincere" | opponent == "G2")
#arranging data by team for animation render time decrease filfullkatoplayerdf
filfullkatoplayerdf <- filfullkatoplayerdf %>%group_by(date) %>% arrange(date)
#defining date as date as there were initial errors with the initial animation due to column values
filfullkatoplayerdf$date <- as.Date(filfullkatoplayerdf$date)
#Creating custom color palette
mycolors <- c("#6A00FF", "#FF00FF", "#FF0040", "#FF9500", "#FFFF00", "#AAFF00","#00FF15", "#00FFFF", "#0095FF")
e <- ggplot(filfullkatoplayerdf, aes(x = kast, y = adr, color = team)) +
geom_point(size = 4, alpha = .6, aes(shape = factor(winner))) +
theme_dark() +
theme(text = element_text (size = 15), title = element_text(face = 'bold'),
plot.title = element_text(hjust = .5), panel.grid.minor = element_blank()) +
scale_shape_discrete(labels = c("Win", "Loss"), name = 'Wins and Losses') +
scale_color_manual(name = "CSGO Teams", values = mycolors) + #using custom color palette
geom_vline(xintercept = 68.95)+
geom_hline(yintercept = 71.90) +
labs(title = "IEM Katowice 2020 Team Performance Spread",
x = "Kills, Assists, Survival and Trades",
y = "Average Damage Per Round")
e
ggsave(here('figs', 'scatterplot.png'))
#saving ani-graph
anim_save(here('figs','anifigwmrk.gif'))
#saving ani-graph
anim_save(here('figs','anifigk.gif'))
#saving ani-graph
anim_save(here::here('figs','anifig.gif'))
# TEST FOR EDITING : building blocks to set up animation
#graph1.animation = c +
# transition_time(as.Date(katoPRGT$date)) +
#labs(subtitle = "Tournament Date: {frame_time}") +
#shadow_wake(wake_length = .1)
#full player data vizualization
graph2.animation <- e +
transition_time(filfullkatoplayerdf$date) +
labs(subtitle = "Tournament Date: {frame_time}") +
theme(plot.subtitle = element_text(color = "maroon", hjust = .5)) +
shadow_mark()
#saving ani-graph
anim_save(here::here('figs','anifig.gif'))
e
# TEST FOR EDITING : building blocks to set up animation
#graph1.animation = c +
# transition_time(as.Date(katoPRGT$date)) +
#labs(subtitle = "Tournament Date: {frame_time}") +
#shadow_wake(wake_length = .1)
#full player data vizualization
graph2.animation <- e +
transition_time(filfullkatoplayerdf$date) +
labs(subtitle = "Tournament Date: {frame_time}") +
theme(plot.subtitle = element_text(color = "maroon", hjust = .5)) +
shadow_mark()
#making the animation
animate(graph2.animation, height = 650, width = 800, detail = 15, fps = 15, nframes = 675,  duration = 45,
end_pause = 75, res = 100)
#saving ani-graph
anim_save(here::here('figs','anifig.gif'))
#building the animation
graph2.animation <- e +
#defining what the transtion will be based on
transition_time(filfullkatoplayerdf$date) +
#making the labels show the date based on the frame
labs(subtitle = "Tournament Date: {frame_time}") +
#adding pop for the subtitle for ease of interpretation
theme(plot.subtitle = element_text(color = "maroon", hjust = .5)) +
#telling the points to stay after each date to make frame transitions look smoother
shadow_mark()
#making the animation
animate(graph2.animation, height = 650, width = 800, detail = 15, fps = 15, nframes = 675,  duration = 45,
end_pause = 75, res = 100)
#saving animation
#anim_save(here::here('figs','anifig.gif'))
#building the animation
graph2.animation <- e +
#defining what the transtion will be based on
transition_time(filfullkatoplayerdf$date) +
#making the labels show the date based on the frame
labs(subtitle = "Tournament Date: {frame_time}") +
#adding pop for the subtitle for ease of interpretation
theme(plot.subtitle = element_text(color = "maroon", hjust = .5)) +
#telling the points to stay after each date to make frame transitions look smoother
shadow_mark()
#making the animation
animate(graph2.animation, height = 650, width = 800, detail = 15, fps = 15, nframes = 675,  duration = 45,
end_pause = 75, res = 100)
#saving animation
anim_save(here::here('figs','anifig.gif'))
#building the animation
graph2.animation <- e +
#defining what the transtion will be based on
transition_time(filfullkatoplayerdf$date) +
#making the labels show the date based on the frame
labs(subtitle = "Tournament Date: {frame_time}") +
#adding pop for the subtitle for ease of interpretation
theme(plot.subtitle = element_text(color = "maroon", hjust = .5)) +
#telling the points to stay after each date to make frame transitions look smoother
shadow_mark()
#making the animation
animate(graph2.animation, height = 650, width = 800, detail = 15, fps = 15, nframes = 675,  duration = 45,
end_pause = 75, res = 100)
#saving animation
anim_save(here::here('figs','anifig.gif'))
![](here('figs', anifig.gf))
#building the animation
graph2.animation <- e +
#defining what the transtion will be based on
transition_time(filfullkatoplayerdf$date) +
#making the labels show the date based on the frame
labs(subtitle = "Tournament Date: {frame_time}") +
#adding pop for the subtitle for ease of interpretation
theme(plot.subtitle = element_text(color = "maroon", hjust = .5)) +
#telling the points to stay after each date to make frame transitions look smoother
shadow_mark()
#making the animation
animate(graph2.animation, height = 650, width = 800, detail = 15, fps = 15, nframes = 675,  duration = 45,
end_pause = 75, res = 100)
#saving animation
anim_save(here::here('figs','anifig.gif'))
include_graphics(here('figs', anifig.gif))
knitr::include_graphics(here('figs', anifig.gif))
install.packages('knitr')
install.packages('knitr')
knitr::include_graphics(here('figs', anifig.gif))
knitr::include_graphics(here('CSGOviz','figs', anifig.gif))
knitr::include_graphics('C:\\Users\\GAMER\\Desktop\\CSGOviz\\figs\\anifig.gif')
knitr::include_graphics(here::('figs', anifig.gif))
knitr::include_graphics(here::here('figs', 'anifig.gif'))
tail(filfullkatoplayerdf)
library("tidyverse")
library("png")
library("gifski")
library("gganimate")
library("ggthemes")
library("here")
library('RColorBrewer')
library('ggrepel')
library('plotly')
dfp <- read.csv(here('rawdata', "players.csv"))
head(dfp)
install.packages('knitr')
install.packages("knitr")
tinytex::install_tinytex()
knitr::opts_chunk$set(echo = TRUE)
library("knitr")
library("tidyverse")
library("png")
library("gifski")
library("gganimate")
library("ggthemes")
library("here")
library('RColorBrewer')
library('ggrepel')
library('plotly')
dfp <- read.csv(here('rawdata', "players.csv"))
head(dfp)
e <- ggplot(filfullkatoplayerdf, aes(x = kast, y = adr, color = team)) +
geom_point(size = 4, alpha = .6, aes(shape = factor(winner))) +
#setting theme
theme_dark() +
#adjusting text and plot elements
theme(text = element_text (size = 15), title = element_text(face = 'bold'),
plot.title = element_text(hjust = .5), panel.grid.minor = element_blank()) +
#renaming the win loss legend
scale_shape_discrete(labels = c("Win", "Loss"), name = 'Wins and Losses') +
#adding the legend 2 title and loading custom colors
scale_color_manual(name = "CSGO Teams", values = mycolors) + #using custom color palette
#adding the quadrants, the values are the median of each measurement(adr and kast)
geom_vline(xintercept = 68.95)+
geom_hline(yintercept = 71.90) +
#adding labels
labs(title = "IEM Katowice 2020 Team Performance Spread",
x = "Kills, Assists, Survival and Trades",
y = "Average Damage Per Round")
e
ggsave(here('figs', 'figure1.png' ))
#building the animation
graph2.animation <- e +
#defining what the transition will be based on
transition_time(filfullkatoplayerdf$date) +
#making the labels show the date based on the frame
labs(subtitle = "Tournament Date: {frame_time}") +
#adding pop for the subtitle for ease of interpretation
theme(plot.subtitle = element_text(color = "maroon", hjust = .5)) +
#telling the points to stay after each date to make frame transitions look smoother
shadow_mark()
#building the animation
graph2.animation <- e +
#defining what the transition will be based on
transition_time(filfullkatoplayerdf$date) +
#making the labels show the date based on the frame
labs(subtitle = "Tournament Date: {frame_time}") +
#adding pop for the subtitle for ease of interpretation
theme(plot.subtitle = element_text(color = "maroon", hjust = .5)) +
#telling the points to stay after each date to make frame transitions look smoother
shadow_mark()
#making the animation
animate(graph2.animation, height = 650, width = 800, detail = 15, fps = 15, nframes = 675,  duration = 45,
end_pause = 75, res = 100)
#saving animation
anim_save(here::here('figs','anifig.gif'))
